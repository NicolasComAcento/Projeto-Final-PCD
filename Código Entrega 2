%%writefile diffusion.cu
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <cuda_runtime.h>
#include <time.h>
#include <omp.h>

#define N 4000
#define T 500
#define D 0.1
#define DELTA_T 0.01
#define DELTA_X 1.0
#define BLOCK_SIZE 16

//declaracao global de funcoes
void diff_eq_sequential(double *C, double *C_new, double *time);
void diff_eq_openmp(double *C, double *C_new, double *time);
void diff_eq_cuda(double *C, double *C_new, int iterations, double *time);
double get_time();

//checagem de erro de CUDA
#define cudaCheckError() { \
    cudaError_t err = cudaGetLastError(); \
    if (err != cudaSuccess) { \
        printf("CUDA error: %s\n", cudaGetErrorString(err)); \
        exit(-1); \
    } \
}

double get_time() {
    struct timespec ts;
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return ts.tv_sec + ts.tv_nsec * 1.0e-9;
}

__global__ void diff_eq_kernel(double *C, double *C_new, int n) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i > 0 && i < n-1 && j > 0 && j < n-1) {
        int idx = i * n + j;
        double laplacian = (C[(i+1)*n + j] + C[(i-1)*n + j] +
                          C[i*n + (j+1)] + C[i*n + (j-1)] - 4.0 * C[idx]) /
                         (DELTA_X * DELTA_X);
        C_new[idx] = C[idx] + D * DELTA_T * laplacian;
    }
}

void diff_eq_sequential(double *C, double *C_new, double *time) {
    double start_time = get_time();

    for (int t = 0; t < T; t++) {
        for (int i = 1; i < N - 1; i++) {
            for (int j = 1; j < N - 1; j++) {
                int idx = i * N + j;
                double laplacian = (C[(i+1)*N + j] + C[(i-1)*N + j] +
                                  C[i*N + (j+1)] + C[i*N + (j-1)] - 4.0 * C[idx]) /
                                 (DELTA_X * DELTA_X);
                C_new[idx] = C[idx] + D * DELTA_T * laplacian;
            }
        }

        // Swap arrays
        double *temp = C;
        C = C_new;
        C_new = temp;
    }

    double end_time = get_time();
    *time = (end_time - start_time) * 1000; // Convert to milliseconds
}

void diff_eq_openmp(double *C, double *C_new, double *time) {
    double start_time = get_time();

    for (int t = 0; t < T; t++) {
        #pragma omp parallel for collapse(2)
        for (int i = 1; i < N - 1; i++) {
            for (int j = 1; j < N - 1; j++) {
                int idx = i * N + j;
                double laplacian = (C[(i+1)*N + j] + C[(i-1)*N + j] +
                                  C[i*N + (j+1)] + C[i*N + (j-1)] - 4.0 * C[idx]) /
                                 (DELTA_X * DELTA_X);
                C_new[idx] = C[idx] + D * DELTA_T * laplacian;
            }
        }

        // Swap arrays
        double *temp = C;
        C = C_new;
        C_new = temp;
    }

    double end_time = get_time();
    *time = (end_time - start_time) * 1000; // Convert to milliseconds
}

void diff_eq_cuda(double *h_C, double *h_C_new, int iterations, double *time) {
    double *d_C, *d_C_new;
    size_t size = N * N * sizeof(double);

    cudaMalloc((void**)&d_C, size);
    cudaMalloc((void**)&d_C_new, size);
    cudaCheckError();

    cudaMemcpy(d_C, h_C, size, cudaMemcpyHostToDevice);
    cudaCheckError();

    dim3 blockDim(BLOCK_SIZE, BLOCK_SIZE);
    dim3 gridDim((N + BLOCK_SIZE - 1) / BLOCK_SIZE,
                 (N + BLOCK_SIZE - 1) / BLOCK_SIZE);

    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);

    for (int t = 0; t < iterations; t++) {
        diff_eq_kernel<<<gridDim, blockDim>>>(d_C, d_C_new, N);
        cudaCheckError();

        // Swap pointers
        double *temp = d_C;
        d_C = d_C_new;
        d_C_new = temp;
    }

    cudaEventRecord(stop);
    cudaEventSynchronize(stop);

    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);
    *time = milliseconds;

    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);
    cudaCheckError();

    cudaFree(d_C);
    cudaFree(d_C_new);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
}

int main() {
    const int thread_counts[] = {1, 2, 4, 8, 16};
    const int num_thread_configs = 5;

    printf("\nTabela 1: Resultados obtidos no código\n");
    printf("|%-12s|%-15s|%-15s|%-15s|%-15s|%-12s|%-12s|\n",
           "Threads", "Tempo", "Tempo", "Tempo", "Speedup", "Speedup", "Precisão");
    printf("|%-12s|%-15s|%-15s|%-15s|%-15s|%-12s|%-12s|\n",
           "", "Sequencial", "OpenMP", "CUDA", "OpenMP", "CUDA", "");
    printf("|------------|---------------|---------------|---------------|---------------|------------|------------|\n");

    for (int i = 0; i < num_thread_configs; i++) {
        int num_threads = thread_counts[i];
        omp_set_num_threads(num_threads);

        // Initialize arrays
        double *h_C_seq = (double*)calloc(N * N, sizeof(double));
        double *h_C_new_seq = (double*)calloc(N * N, sizeof(double));
        double *h_C_omp = (double*)calloc(N * N, sizeof(double));
        double *h_C_new_omp = (double*)calloc(N * N, sizeof(double));
        double *h_C_cuda = (double*)calloc(N * N, sizeof(double));
        double *h_C_new_cuda = (double*)calloc(N * N, sizeof(double));


        h_C_seq[N/2 * N + N/2] = 1.0;
        h_C_omp[N/2 * N + N/2] = 1.0;
        h_C_cuda[N/2 * N + N/2] = 1.0;


        double seq_time, omp_time, cuda_time;


        printf("Running with %d threads...\n", num_threads);

        printf("  Sequential version...\n");
        diff_eq_sequential(h_C_seq, h_C_new_seq, &seq_time);

        printf("  OpenMP version...\n");
        diff_eq_openmp(h_C_omp, h_C_new_omp, &omp_time);

        printf("  CUDA version...\n");
        diff_eq_cuda(h_C_cuda, h_C_new_cuda, T, &cuda_time);


        double max_diff_omp = 0.0;
        double max_diff_cuda = 0.0;
        for (int j = 0; j < N * N; j++) {
            double diff_omp = fabs(h_C_seq[j] - h_C_omp[j]);
            double diff_cuda = fabs(h_C_seq[j] - h_C_cuda[j]);
            if (diff_omp > max_diff_omp) max_diff_omp = diff_omp;
            if (diff_cuda > max_diff_cuda) max_diff_cuda = diff_cuda;
        }


        double speedup_omp = seq_time / omp_time;
        double speedup_cuda = seq_time / cuda_time;


        double max_diff = fmax(max_diff_omp, max_diff_cuda);


        printf("|%-12d|%-15.6f|%-15.6f|%-15.6f|%-15.2f|%-12.2f|%-12.2e|\n",
               num_threads,
               seq_time,
               omp_time,
               cuda_time,
               speedup_omp,
               speedup_cuda,
               max_diff);


        free(h_C_seq);
        free(h_C_new_seq);
        free(h_C_omp);
        free(h_C_new_omp);
        free(h_C_cuda);
        free(h_C_new_cuda);
    }

    printf("|------------|---------------|---------------|---------------|---------------|------------|------------|\n");
    return 0;
}
